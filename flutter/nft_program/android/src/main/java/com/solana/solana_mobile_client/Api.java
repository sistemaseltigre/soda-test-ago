// Autogenerated from Pigeon (v7.2.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.solana.solana_mobile_client;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Api {
  @NonNull
  private static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    errorList.add(exception.toString());
    errorList.add(exception.getClass().getSimpleName());
    errorList.add(
      "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorList;
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class GetCapabilitiesResultDto {
    private @NonNull Boolean supportsCloneAuthorization;

    public @NonNull Boolean getSupportsCloneAuthorization() {
      return supportsCloneAuthorization;
    }

    public void setSupportsCloneAuthorization(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"supportsCloneAuthorization\" is null.");
      }
      this.supportsCloneAuthorization = setterArg;
    }

    private @NonNull Boolean supportsSignAndSendTransactions;

    public @NonNull Boolean getSupportsSignAndSendTransactions() {
      return supportsSignAndSendTransactions;
    }

    public void setSupportsSignAndSendTransactions(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"supportsSignAndSendTransactions\" is null.");
      }
      this.supportsSignAndSendTransactions = setterArg;
    }

    private @NonNull Long maxTransactionsPerSigningRequest;

    public @NonNull Long getMaxTransactionsPerSigningRequest() {
      return maxTransactionsPerSigningRequest;
    }

    public void setMaxTransactionsPerSigningRequest(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"maxTransactionsPerSigningRequest\" is null.");
      }
      this.maxTransactionsPerSigningRequest = setterArg;
    }

    private @NonNull Long maxMessagesPerSigningRequest;

    public @NonNull Long getMaxMessagesPerSigningRequest() {
      return maxMessagesPerSigningRequest;
    }

    public void setMaxMessagesPerSigningRequest(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"maxMessagesPerSigningRequest\" is null.");
      }
      this.maxMessagesPerSigningRequest = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private GetCapabilitiesResultDto() {}

    public static final class Builder {

      private @Nullable Boolean supportsCloneAuthorization;

      public @NonNull Builder setSupportsCloneAuthorization(@NonNull Boolean setterArg) {
        this.supportsCloneAuthorization = setterArg;
        return this;
      }

      private @Nullable Boolean supportsSignAndSendTransactions;

      public @NonNull Builder setSupportsSignAndSendTransactions(@NonNull Boolean setterArg) {
        this.supportsSignAndSendTransactions = setterArg;
        return this;
      }

      private @Nullable Long maxTransactionsPerSigningRequest;

      public @NonNull Builder setMaxTransactionsPerSigningRequest(@NonNull Long setterArg) {
        this.maxTransactionsPerSigningRequest = setterArg;
        return this;
      }

      private @Nullable Long maxMessagesPerSigningRequest;

      public @NonNull Builder setMaxMessagesPerSigningRequest(@NonNull Long setterArg) {
        this.maxMessagesPerSigningRequest = setterArg;
        return this;
      }

      public @NonNull GetCapabilitiesResultDto build() {
        GetCapabilitiesResultDto pigeonReturn = new GetCapabilitiesResultDto();
        pigeonReturn.setSupportsCloneAuthorization(supportsCloneAuthorization);
        pigeonReturn.setSupportsSignAndSendTransactions(supportsSignAndSendTransactions);
        pigeonReturn.setMaxTransactionsPerSigningRequest(maxTransactionsPerSigningRequest);
        pigeonReturn.setMaxMessagesPerSigningRequest(maxMessagesPerSigningRequest);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(supportsCloneAuthorization);
      toListResult.add(supportsSignAndSendTransactions);
      toListResult.add(maxTransactionsPerSigningRequest);
      toListResult.add(maxMessagesPerSigningRequest);
      return toListResult;
    }

    static @NonNull GetCapabilitiesResultDto fromList(@NonNull ArrayList<Object> list) {
      GetCapabilitiesResultDto pigeonResult = new GetCapabilitiesResultDto();
      Object supportsCloneAuthorization = list.get(0);
      pigeonResult.setSupportsCloneAuthorization((Boolean) supportsCloneAuthorization);
      Object supportsSignAndSendTransactions = list.get(1);
      pigeonResult.setSupportsSignAndSendTransactions((Boolean) supportsSignAndSendTransactions);
      Object maxTransactionsPerSigningRequest = list.get(2);
      pigeonResult.setMaxTransactionsPerSigningRequest((maxTransactionsPerSigningRequest == null) ? null : ((maxTransactionsPerSigningRequest instanceof Integer) ? (Integer) maxTransactionsPerSigningRequest : (Long) maxTransactionsPerSigningRequest));
      Object maxMessagesPerSigningRequest = list.get(3);
      pigeonResult.setMaxMessagesPerSigningRequest((maxMessagesPerSigningRequest == null) ? null : ((maxMessagesPerSigningRequest instanceof Integer) ? (Integer) maxMessagesPerSigningRequest : (Long) maxMessagesPerSigningRequest));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class AuthorizationResultDto {
    private @NonNull String authToken;

    public @NonNull String getAuthToken() {
      return authToken;
    }

    public void setAuthToken(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"authToken\" is null.");
      }
      this.authToken = setterArg;
    }

    private @NonNull byte[] publicKey;

    public @NonNull byte[] getPublicKey() {
      return publicKey;
    }

    public void setPublicKey(@NonNull byte[] setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"publicKey\" is null.");
      }
      this.publicKey = setterArg;
    }

    private @Nullable String accountLabel;

    public @Nullable String getAccountLabel() {
      return accountLabel;
    }

    public void setAccountLabel(@Nullable String setterArg) {
      this.accountLabel = setterArg;
    }

    private @Nullable String walletUriBase;

    public @Nullable String getWalletUriBase() {
      return walletUriBase;
    }

    public void setWalletUriBase(@Nullable String setterArg) {
      this.walletUriBase = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private AuthorizationResultDto() {}

    public static final class Builder {

      private @Nullable String authToken;

      public @NonNull Builder setAuthToken(@NonNull String setterArg) {
        this.authToken = setterArg;
        return this;
      }

      private @Nullable byte[] publicKey;

      public @NonNull Builder setPublicKey(@NonNull byte[] setterArg) {
        this.publicKey = setterArg;
        return this;
      }

      private @Nullable String accountLabel;

      public @NonNull Builder setAccountLabel(@Nullable String setterArg) {
        this.accountLabel = setterArg;
        return this;
      }

      private @Nullable String walletUriBase;

      public @NonNull Builder setWalletUriBase(@Nullable String setterArg) {
        this.walletUriBase = setterArg;
        return this;
      }

      public @NonNull AuthorizationResultDto build() {
        AuthorizationResultDto pigeonReturn = new AuthorizationResultDto();
        pigeonReturn.setAuthToken(authToken);
        pigeonReturn.setPublicKey(publicKey);
        pigeonReturn.setAccountLabel(accountLabel);
        pigeonReturn.setWalletUriBase(walletUriBase);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(authToken);
      toListResult.add(publicKey);
      toListResult.add(accountLabel);
      toListResult.add(walletUriBase);
      return toListResult;
    }

    static @NonNull AuthorizationResultDto fromList(@NonNull ArrayList<Object> list) {
      AuthorizationResultDto pigeonResult = new AuthorizationResultDto();
      Object authToken = list.get(0);
      pigeonResult.setAuthToken((String) authToken);
      Object publicKey = list.get(1);
      pigeonResult.setPublicKey((byte[]) publicKey);
      Object accountLabel = list.get(2);
      pigeonResult.setAccountLabel((String) accountLabel);
      Object walletUriBase = list.get(3);
      pigeonResult.setWalletUriBase((String) walletUriBase);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class SignPayloadsResultDto {
    private @NonNull List<byte[]> signedPayloads;

    public @NonNull List<byte[]> getSignedPayloads() {
      return signedPayloads;
    }

    public void setSignedPayloads(@NonNull List<byte[]> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"signedPayloads\" is null.");
      }
      this.signedPayloads = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private SignPayloadsResultDto() {}

    public static final class Builder {

      private @Nullable List<byte[]> signedPayloads;

      public @NonNull Builder setSignedPayloads(@NonNull List<byte[]> setterArg) {
        this.signedPayloads = setterArg;
        return this;
      }

      public @NonNull SignPayloadsResultDto build() {
        SignPayloadsResultDto pigeonReturn = new SignPayloadsResultDto();
        pigeonReturn.setSignedPayloads(signedPayloads);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(signedPayloads);
      return toListResult;
    }

    static @NonNull SignPayloadsResultDto fromList(@NonNull ArrayList<Object> list) {
      SignPayloadsResultDto pigeonResult = new SignPayloadsResultDto();
      Object signedPayloads = list.get(0);
      pigeonResult.setSignedPayloads((List<byte[]>) signedPayloads);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class SignAndSendTransactionsResultDto {
    private @NonNull List<byte[]> signatures;

    public @NonNull List<byte[]> getSignatures() {
      return signatures;
    }

    public void setSignatures(@NonNull List<byte[]> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"signatures\" is null.");
      }
      this.signatures = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private SignAndSendTransactionsResultDto() {}

    public static final class Builder {

      private @Nullable List<byte[]> signatures;

      public @NonNull Builder setSignatures(@NonNull List<byte[]> setterArg) {
        this.signatures = setterArg;
        return this;
      }

      public @NonNull SignAndSendTransactionsResultDto build() {
        SignAndSendTransactionsResultDto pigeonReturn = new SignAndSendTransactionsResultDto();
        pigeonReturn.setSignatures(signatures);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(signatures);
      return toListResult;
    }

    static @NonNull SignAndSendTransactionsResultDto fromList(@NonNull ArrayList<Object> list) {
      SignAndSendTransactionsResultDto pigeonResult = new SignAndSendTransactionsResultDto();
      Object signatures = list.get(0);
      pigeonResult.setSignatures((List<byte[]>) signatures);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class SignedMessageDto {
    private @NonNull byte[] message;

    public @NonNull byte[] getMessage() {
      return message;
    }

    public void setMessage(@NonNull byte[] setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"message\" is null.");
      }
      this.message = setterArg;
    }

    private @NonNull List<byte[]> addresses;

    public @NonNull List<byte[]> getAddresses() {
      return addresses;
    }

    public void setAddresses(@NonNull List<byte[]> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"addresses\" is null.");
      }
      this.addresses = setterArg;
    }

    private @NonNull List<byte[]> signatures;

    public @NonNull List<byte[]> getSignatures() {
      return signatures;
    }

    public void setSignatures(@NonNull List<byte[]> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"signatures\" is null.");
      }
      this.signatures = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private SignedMessageDto() {}

    public static final class Builder {

      private @Nullable byte[] message;

      public @NonNull Builder setMessage(@NonNull byte[] setterArg) {
        this.message = setterArg;
        return this;
      }

      private @Nullable List<byte[]> addresses;

      public @NonNull Builder setAddresses(@NonNull List<byte[]> setterArg) {
        this.addresses = setterArg;
        return this;
      }

      private @Nullable List<byte[]> signatures;

      public @NonNull Builder setSignatures(@NonNull List<byte[]> setterArg) {
        this.signatures = setterArg;
        return this;
      }

      public @NonNull SignedMessageDto build() {
        SignedMessageDto pigeonReturn = new SignedMessageDto();
        pigeonReturn.setMessage(message);
        pigeonReturn.setAddresses(addresses);
        pigeonReturn.setSignatures(signatures);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(message);
      toListResult.add(addresses);
      toListResult.add(signatures);
      return toListResult;
    }

    static @NonNull SignedMessageDto fromList(@NonNull ArrayList<Object> list) {
      SignedMessageDto pigeonResult = new SignedMessageDto();
      Object message = list.get(0);
      pigeonResult.setMessage((byte[]) message);
      Object addresses = list.get(1);
      pigeonResult.setAddresses((List<byte[]>) addresses);
      Object signatures = list.get(2);
      pigeonResult.setSignatures((List<byte[]>) signatures);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class SignMessagesResultDto {
    private @NonNull List<SignedMessageDto> messages;

    public @NonNull List<SignedMessageDto> getMessages() {
      return messages;
    }

    public void setMessages(@NonNull List<SignedMessageDto> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"messages\" is null.");
      }
      this.messages = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private SignMessagesResultDto() {}

    public static final class Builder {

      private @Nullable List<SignedMessageDto> messages;

      public @NonNull Builder setMessages(@NonNull List<SignedMessageDto> setterArg) {
        this.messages = setterArg;
        return this;
      }

      public @NonNull SignMessagesResultDto build() {
        SignMessagesResultDto pigeonReturn = new SignMessagesResultDto();
        pigeonReturn.setMessages(messages);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(messages);
      return toListResult;
    }

    static @NonNull SignMessagesResultDto fromList(@NonNull ArrayList<Object> list) {
      SignMessagesResultDto pigeonResult = new SignMessagesResultDto();
      Object messages = list.get(0);
      pigeonResult.setMessages((List<SignedMessageDto>) messages);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);

    void error(Throwable error);
  }

  private static class ApiLocalAssociationScenarioCodec extends StandardMessageCodec {
    public static final ApiLocalAssociationScenarioCodec INSTANCE = new ApiLocalAssociationScenarioCodec();

    private ApiLocalAssociationScenarioCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return AuthorizationResultDto.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return GetCapabilitiesResultDto.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return SignAndSendTransactionsResultDto.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return SignMessagesResultDto.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return SignPayloadsResultDto.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return SignedMessageDto.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof AuthorizationResultDto) {
        stream.write(128);
        writeValue(stream, ((AuthorizationResultDto) value).toList());
      } else if (value instanceof GetCapabilitiesResultDto) {
        stream.write(129);
        writeValue(stream, ((GetCapabilitiesResultDto) value).toList());
      } else if (value instanceof SignAndSendTransactionsResultDto) {
        stream.write(130);
        writeValue(stream, ((SignAndSendTransactionsResultDto) value).toList());
      } else if (value instanceof SignMessagesResultDto) {
        stream.write(131);
        writeValue(stream, ((SignMessagesResultDto) value).toList());
      } else if (value instanceof SignPayloadsResultDto) {
        stream.write(132);
        writeValue(stream, ((SignPayloadsResultDto) value).toList());
      } else if (value instanceof SignedMessageDto) {
        stream.write(133);
        writeValue(stream, ((SignedMessageDto) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface ApiLocalAssociationScenario {

    void create(@NonNull Long id, Result<Void> result);

    void start(@NonNull Long id, Result<Void> result);

    void close(@NonNull Long id, Result<Void> result);

    void startActivityForResult(@NonNull Long id, @Nullable String uriPrefix, Result<Void> result);

    void getCapabilities(@NonNull Long id, Result<GetCapabilitiesResultDto> result);

    void authorize(@NonNull Long id, @Nullable String identityUri, @Nullable String iconUri, @Nullable String identityName, @Nullable String cluster, Result<AuthorizationResultDto> result);

    void reauthorize(@NonNull Long id, @Nullable String identityUri, @Nullable String iconUri, @Nullable String identityName, @NonNull String authToken, Result<AuthorizationResultDto> result);

    void deauthorize(@NonNull Long id, @NonNull String authToken, Result<Void> result);

    void signTransactions(@NonNull Long id, @NonNull List<byte[]> transactions, Result<SignPayloadsResultDto> result);

    void signMessages(@NonNull Long id, @NonNull List<byte[]> messages, @NonNull List<byte[]> addresses, Result<SignMessagesResultDto> result);

    void signAndSendTransactions(@NonNull Long id, @NonNull List<byte[]> transactions, @Nullable Long minContextSlot, Result<SignAndSendTransactionsResultDto> result);

    /** The codec used by ApiLocalAssociationScenario. */
    static MessageCodec<Object> getCodec() {
      return ApiLocalAssociationScenarioCodec.INSTANCE;
    }
    /**Sets up an instance of `ApiLocalAssociationScenario` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, ApiLocalAssociationScenario api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ApiLocalAssociationScenario.create", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  Number idArg = (Number) args.get(0);
                  if (idArg == null) {
                    throw new NullPointerException("idArg unexpectedly null.");
                  }
                  Result<Void> resultCallback = 
                      new Result<Void>() {
                        public void success(Void result) {
                          wrapped.add(0, null);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          reply.reply(wrappedError);
                        }
                      };

                  api.create((idArg == null) ? null : idArg.longValue(), resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  reply.reply(wrappedError);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ApiLocalAssociationScenario.start", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  Number idArg = (Number) args.get(0);
                  if (idArg == null) {
                    throw new NullPointerException("idArg unexpectedly null.");
                  }
                  Result<Void> resultCallback = 
                      new Result<Void>() {
                        public void success(Void result) {
                          wrapped.add(0, null);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          reply.reply(wrappedError);
                        }
                      };

                  api.start((idArg == null) ? null : idArg.longValue(), resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  reply.reply(wrappedError);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ApiLocalAssociationScenario.close", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  Number idArg = (Number) args.get(0);
                  if (idArg == null) {
                    throw new NullPointerException("idArg unexpectedly null.");
                  }
                  Result<Void> resultCallback = 
                      new Result<Void>() {
                        public void success(Void result) {
                          wrapped.add(0, null);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          reply.reply(wrappedError);
                        }
                      };

                  api.close((idArg == null) ? null : idArg.longValue(), resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  reply.reply(wrappedError);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ApiLocalAssociationScenario.startActivityForResult", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  Number idArg = (Number) args.get(0);
                  if (idArg == null) {
                    throw new NullPointerException("idArg unexpectedly null.");
                  }
                  String uriPrefixArg = (String) args.get(1);
                  Result<Void> resultCallback = 
                      new Result<Void>() {
                        public void success(Void result) {
                          wrapped.add(0, null);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          reply.reply(wrappedError);
                        }
                      };

                  api.startActivityForResult((idArg == null) ? null : idArg.longValue(), uriPrefixArg, resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  reply.reply(wrappedError);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ApiLocalAssociationScenario.getCapabilities", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  Number idArg = (Number) args.get(0);
                  if (idArg == null) {
                    throw new NullPointerException("idArg unexpectedly null.");
                  }
                  Result<GetCapabilitiesResultDto> resultCallback = 
                      new Result<GetCapabilitiesResultDto>() {
                        public void success(GetCapabilitiesResultDto result) {
                          wrapped.add(0, result);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          reply.reply(wrappedError);
                        }
                      };

                  api.getCapabilities((idArg == null) ? null : idArg.longValue(), resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  reply.reply(wrappedError);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ApiLocalAssociationScenario.authorize", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  Number idArg = (Number) args.get(0);
                  if (idArg == null) {
                    throw new NullPointerException("idArg unexpectedly null.");
                  }
                  String identityUriArg = (String) args.get(1);
                  String iconUriArg = (String) args.get(2);
                  String identityNameArg = (String) args.get(3);
                  String clusterArg = (String) args.get(4);
                  Result<AuthorizationResultDto> resultCallback = 
                      new Result<AuthorizationResultDto>() {
                        public void success(AuthorizationResultDto result) {
                          wrapped.add(0, result);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          reply.reply(wrappedError);
                        }
                      };

                  api.authorize((idArg == null) ? null : idArg.longValue(), identityUriArg, iconUriArg, identityNameArg, clusterArg, resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  reply.reply(wrappedError);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ApiLocalAssociationScenario.reauthorize", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  Number idArg = (Number) args.get(0);
                  if (idArg == null) {
                    throw new NullPointerException("idArg unexpectedly null.");
                  }
                  String identityUriArg = (String) args.get(1);
                  String iconUriArg = (String) args.get(2);
                  String identityNameArg = (String) args.get(3);
                  String authTokenArg = (String) args.get(4);
                  if (authTokenArg == null) {
                    throw new NullPointerException("authTokenArg unexpectedly null.");
                  }
                  Result<AuthorizationResultDto> resultCallback = 
                      new Result<AuthorizationResultDto>() {
                        public void success(AuthorizationResultDto result) {
                          wrapped.add(0, result);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          reply.reply(wrappedError);
                        }
                      };

                  api.reauthorize((idArg == null) ? null : idArg.longValue(), identityUriArg, iconUriArg, identityNameArg, authTokenArg, resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  reply.reply(wrappedError);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ApiLocalAssociationScenario.deauthorize", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  Number idArg = (Number) args.get(0);
                  if (idArg == null) {
                    throw new NullPointerException("idArg unexpectedly null.");
                  }
                  String authTokenArg = (String) args.get(1);
                  if (authTokenArg == null) {
                    throw new NullPointerException("authTokenArg unexpectedly null.");
                  }
                  Result<Void> resultCallback = 
                      new Result<Void>() {
                        public void success(Void result) {
                          wrapped.add(0, null);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          reply.reply(wrappedError);
                        }
                      };

                  api.deauthorize((idArg == null) ? null : idArg.longValue(), authTokenArg, resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  reply.reply(wrappedError);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ApiLocalAssociationScenario.signTransactions", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  Number idArg = (Number) args.get(0);
                  if (idArg == null) {
                    throw new NullPointerException("idArg unexpectedly null.");
                  }
                  List<byte[]> transactionsArg = (List<byte[]>) args.get(1);
                  if (transactionsArg == null) {
                    throw new NullPointerException("transactionsArg unexpectedly null.");
                  }
                  Result<SignPayloadsResultDto> resultCallback = 
                      new Result<SignPayloadsResultDto>() {
                        public void success(SignPayloadsResultDto result) {
                          wrapped.add(0, result);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          reply.reply(wrappedError);
                        }
                      };

                  api.signTransactions((idArg == null) ? null : idArg.longValue(), transactionsArg, resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  reply.reply(wrappedError);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ApiLocalAssociationScenario.signMessages", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  Number idArg = (Number) args.get(0);
                  if (idArg == null) {
                    throw new NullPointerException("idArg unexpectedly null.");
                  }
                  List<byte[]> messagesArg = (List<byte[]>) args.get(1);
                  if (messagesArg == null) {
                    throw new NullPointerException("messagesArg unexpectedly null.");
                  }
                  List<byte[]> addressesArg = (List<byte[]>) args.get(2);
                  if (addressesArg == null) {
                    throw new NullPointerException("addressesArg unexpectedly null.");
                  }
                  Result<SignMessagesResultDto> resultCallback = 
                      new Result<SignMessagesResultDto>() {
                        public void success(SignMessagesResultDto result) {
                          wrapped.add(0, result);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          reply.reply(wrappedError);
                        }
                      };

                  api.signMessages((idArg == null) ? null : idArg.longValue(), messagesArg, addressesArg, resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  reply.reply(wrappedError);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ApiLocalAssociationScenario.signAndSendTransactions", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  Number idArg = (Number) args.get(0);
                  if (idArg == null) {
                    throw new NullPointerException("idArg unexpectedly null.");
                  }
                  List<byte[]> transactionsArg = (List<byte[]>) args.get(1);
                  if (transactionsArg == null) {
                    throw new NullPointerException("transactionsArg unexpectedly null.");
                  }
                  Number minContextSlotArg = (Number) args.get(2);
                  Result<SignAndSendTransactionsResultDto> resultCallback = 
                      new Result<SignAndSendTransactionsResultDto>() {
                        public void success(SignAndSendTransactionsResultDto result) {
                          wrapped.add(0, result);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          reply.reply(wrappedError);
                        }
                      };

                  api.signAndSendTransactions((idArg == null) ? null : idArg.longValue(), transactionsArg, (minContextSlotArg == null) ? null : minContextSlotArg.longValue(), resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  reply.reply(wrappedError);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
